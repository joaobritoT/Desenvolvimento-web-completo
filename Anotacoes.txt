Comentarios em javascript: 

// - comentario em linha

/* */ - comentario em codigo

Vriaveis em js:

String, number, boolean

Declarando uma variavel:

var n1 = 5;
var nome = "joao"
var verdadeiro = True;
var falos = False;

document.write() - escreve um valor na tela

concatenando um elemento na tela: document.write('<h1>Ola ' + nome + '</h1>')

variaveis null e undefined:
  null: ausencia intencional de um valor
  undefined: nao possue nenhum valor

estrutura if, else:

if(condicao){

}else{

}

Operadores de comparacao: 

== igual
==== identico (iguais e do mesmo tipo)
!= diferente
!== nao identico (diferentes e de tipos diferentes)
< menor
> maior
<= menor ou igual
>= maior ou igual

usamos a funcao parseInt, toString ou parseFloat para alterar o tipo da variavel

switch case:

	switch(opcao){
		case1:
		   break
		case2
		   break	
}

O switch faz a comparacao com o operador de identico

Operadores aritimeticos:

+ adicao
- subtracao
* multiplicacao
/ divisao
% resto da divisao
++ incremento
-- decremento

Fucoes:
 function calcularAreaTerreno(largura, comprimento){
	var area = largura * comprimento
	return area
}

area_terreno1 = calcularAreaTerreno(1000,1000)
console.log(area_terreno1)

Escopo de vari√°veis:

temos 3 escopos: global, funcao e de bloco

variaveis declaradas dentro de uma funcao, pode ser acessada apenas dentro do proprio escopo

Funcao anonima:
	function(){
	   console.log("ola, mundo")
}

podemos associar uma funcao para dentro de uma variavel: 

var teste = function(){
	   console.log("ola, mundo")
}

Funcao de callback:

	Encaminhadas como parametros para outras funcoes:

	 function exibirArtigo(id,callbackSucesso,callbackErro){
            // recuperar o id via requisicao http

            if(true){
                sucesso('funcoes de callback em js','Funcoes de callback sao muito utilizadas')
            }else{
                erro('Erro')
            }
        }

        var sucesso = function(titulo, descricao){
            document.write('<h1>' + titulo + '</h1>')
            document.write('<hr />')
            document.write('<h1>' + descricao + '</h1>')
        }
        var erro = function(erro){
            document.write('<h1>' + erro + '</h1>')
        }
        exibirArtigo(1, sucesso,erro)


Funcoes nativas para manipular string:
	lenght = tamando da string
	string.lenght

	charAt() - retorna o valor do indice passado
	string.charAt(indice)

	indexOf() - retorna a posicao de um caracter (primeira ocorrencia)
	string.indexOf('g')

	replace() - substitui elemtos dentrod e uma string
	string.replace('antigo','novo')

	substr() - extrair parde de uma string atravesd e um valor inicial e final
	sting.substr(1,6) - comeca no indice 1 e avanca 6 posicoes

	toLowerCase() - converte para minusculo
	toupperCase() - converte para maiusculo

	trim() - remove espacos em branco

Funcoes nativas para tarefas matematicas:

	Math.ceil(float) - arredonda pra cima
	Math.floor(float) - arredonda pra baixo
	Math.round(float) - arredonda de acordo com o valor 
	Math.random() - fornece um numero aleatorio
	Math.sqrt(number) - retorna a raiz quadrada
	
Fumcoes nativas para manipular datas:

	var data = new Date() - sempre devemos instanciar o objeto date

	as informacoes sao de acordo com o os parametros de data e hora do sistema operacional do	usuario

	data.getDate() - retorna a data atual
	data.getMonth() + 1 - retorna o mes (0-11)
	data.getFullYear() - retorna o ano atual
	
	Existem diversos outros metodos dentro do objeto date.


Eventos: 
	capturar acoes que sao feitos pelos usuarios dentro do navegador
	
	mouse:
	  onlick - quando elemento eh clicado
	  ondblclick - quando elemento eh clicado 2 vezes
	  onmouseup - quando o clique sobre um elemento e liberado
	  onmouseover - quando passa o mouse pelo elemento
	  onmouseout - quandos sai do elemetno com o mouse
	

	podemos adicionar mais de uma acao dentro de um elemento html

	Teclado: 
	  onkeydown - quando a tecla eh pressionada
	  onekeyup - quando a tecla eh liberada
	  onekeypress - quando mantem a tecla pressionada

	Janela:
	  onresize - acionado quando a pagina e redimensionada
	  onscroll - quando usamos o scroll do mouse
	
	Formulario:
	  onfocus - quando o elemento recebe o foco do cursor do mouse
	  onbluor - quando o elemento perder o foco
	  onchange - quando o elemento e modificado

DOM:
	
   Document Object Model
   Fornece metodos para selecionar elementos html
   
   Metodos para capturar elementos: 
	getElementById()
	getElementsByTagName()
	getElementsByClassName()
	getElementsByName()

	para setar um atibuto de estilo atraves do javascript:

	document.getElementById("elemento").style.atributos
	em js, usamos o padrao cammelcase para atributos css

	para setar classes a elementos html:
	document.getElementById('elemento').className = 'nome da classe a ser aplicada'

   
   interpretar string para funcao javascript: eval(string)

Array:
    var lista = Array() ou var lista = []

Array multidimensional:
    	var listas = Array()
        listas['frutas'] = Array('banana','maca')
        listas['pessoas'] = Array("joao",'pedro')
        console.log(listas)
	desta maneira, podemos manipular parecido com um dicionario do python:
	console.log(listas['pessoas'][0])

Metodos de inclusao nos arrays: 
        var lista_frutas = Array('banana','maca')
        
        incluir elemto no final do array:
        lista_frutas.push("uva")
	
	incluir elemento no inicio do array:
        lista_frutas.unshift('pera')

	excluir elemento no final do array:
        lista_frutas.pop()

        excluir elemento no comeco do array:
        lista_frutas.shift()

Metodos de pesquisa array:
	Usamos o metodo indexof: 

	var lista_frutas = Array('banana','maca','pera','uva')

        console.log(lista_frutas.indexOf('uva'))

	Se o elemto nao existir, o retorno vai ser -1

Ordenacao de array: 
	var lista_frutas = Array('banana','maca','pera','uva')

       	console.log(lista_frutas.sort()) - ordena alfanumericamente


	console.log(lista_numeros.sort(ordenaNumeros)) - ordena numericamente

       function ordenaNumeros(a,b){
        return a - b
       }

Estrutura de repeticao:
	While:
	
	while(condicao){
	    codigo
       }

       do while:

	do{

	   codigo

	}while(condicao)


	for:	

	for(variavel;condicao;controle;){

	    codigo

	}


	percorrendo um array com for:
	var lista_frutas = Array('banana','maca','pera','uva')

       for(var elementos in lista_frutas){
        document.write(lista_frutas[elementos] + "<br/>")
       }


       Tabuadas com for: 

	for(y=1;y<=10;y++){

        for(x=1;x<=10;x++){
            document.write(`${y} x ${x} = ${y*x}` + "<br/>")
        }
        document.write("<hr/>")
       } 


       foreach em javascript: 

	var lista_funcionarios = ['pedro','ana','miguel','carlos','pedro']

        lista_funcionarios.forEach(function(valor,indice,array){
            console.log(valor)
        });


	Parametros de funcoes:
	Podemos utilizar do objeto arguments dentro de uma funcao para declarara quantos
	parametros necessarios:

	function soma(){
            var resultado = 0
            for(i in arguments){
                resultado += arguments[i]
            }
            console.log(resultado)
        }

        console.log(soma(5,4,10,6))

	
	Tratamentos de erro:

	var video = Array()
        video[1] = Array()
        video[1]['nome'] = 'breaking bad'
        video[1]['categoria'] = 'drama'

        function getvideo(video){
            try{
                console.log[0]['nome']
            }
            catch{
                console.log("erro")
            }
            
            finally{
                console.log("sempre aqui")
            }
        }

	Sequencia - tenta, se nao coseguir: executa o o catch e depois o finally

	Browser Object Model:

	API que permite o acesso via Javascript a recursos do browser

	elemento window - janela do navegador - window.open()
	elemto screen - tela do browser, podemos ter acesso a largura x altura
	location - Window.location - atributos e metos da url atual
	timing - setTimeout (<acao>,<tempo em milisegundos>) - executa uma acao uma vez apos o tempo 	informado
	setInterval - Sempre executada apos o periodo informado


	Criando um elemento e adicionado no html diretamente com js:

	var mosquito = document.createElement('img')
	document.body.appendChild(mosquito)

	Podemos utilizar a funcao clearinterval para limpar um determinado intervalo de tempo


	ECMAScript:
	
	- Versao da linguagem javascript
	- Diversas features
	
	var e let

	let: declaracao de uma variavael, ele preserva o escopo onde foi declarada
	variaveis delcaradas como let podem ser acessadas apenas no escopo que foram declaradas
	
	Exemplo: 

	let serie = 'breaking bad'

       {
        let serie = 'the walking dead'
        console.log('dentro do bloco: ' + serie)
       }
       console.log("fora do bloco: "+ serie)

	Const: declaracao de uma variavel para constantes, nao sofre alteracao de valor durante o 	processamento do script, exemplo: numero de PI, constantes sao declaradas com caracteres maiusculos

	const PI = "3.1415......"

	Template strings: usamos para formatacao de frases (interpolacao)
	Exemplo:
	
	var nome = 'joao'

        console.log(`ola ${nome}, tudo bem?`)

	Parametros default para funcoes: Declaramos os valores na declaracao da variave, se outros
					 parametros forem declaradaos na chamada da funcao, os valores
					 mudam

	exemplo: 

	function contarHistoria(personagem = 'fuba',acao = 'latir',dono='joao'){
            document.write(`era uma vez, um cachorro chamado ${personagem}, ele gostava de ${acao}, seu 	    dono era ${dono}`)
        }
        contarHistoria()

	
	Arrow functions: 

	Escrita de funcoes anonimas
	Exemplo: 

	let quadrado = (x) => {
            return x * x
        }

	ou 

	let quadrado = x => x*x


	Orientacao a objetos:

		Criando um objeto e js:

		Class Calculadora {

		constructor(){

			this.a = 10
			this.b = 7
			this.operador = 'mult'
		}

		calcular(){

			if (this.operador === 'multi'){
				this.a * this.b
			}
		}
	}

	calculadora = new Calculadora()
	calculadora.calcular()

	Encapsulamento: Forma de dar visibilidade a um atributo ou metodo, um metodo pode ser privado ou 			publico
	
	class Tv{
            constructor(){
                this._canais = Array(2,4,5,7,10)
                this._canalAtivo = 5
                this._volume = 5
            }
            get canalAtivo(){
                return this._canalAtivo
            }

        }

        var tv = new Tv()
        console.log(tv.canalAtivo)

	Herancao em js:


	class Animal{
            constructor(){
                this.cor = ''
                this.tamanho = null
            }

            dormir(){
                console.log("dormiu")
            }
        }



        class Cachorro extends Animal{
            constructor(){
                super()
                this.cor = "branco"
                this.orelhas = "Grandes e caidas"
            }
            correr(){
                console.log("correu")
            }

            rosnar(){
                console.log("rosnou")
            }
        }

	Para a classe filha herdar atributos e metodos da classe pai, precisa usar o metodo super()
	em seu construtor

	
	Objeto lietral: Objeto descrito dentro da classe:

	
	let produto_literal = {
            descricao: 'notebook',
            preco: 1500,
            ver_desc: function(){
                console.log(`${this.descricao} por apenas ${this.preco}`)
            }
        }
	

	objetos a partir de funcoes: 

	let Carro = function(){
            this.cor = "azul"
            this.modelo = "onix"
            this.ano = "2020"
            this.velocidade_atual = 0

            this.acelerar = function(){
                let velocidade = this.getVelocidadeAtual() + 10
                this.setVelocidadeAtual(velocidade)
            }

            this.getVelocidadeAtual = function(){
                return this.velocidade_atual
            }

            this.setVelocidadeAtual = function(velocidade){
                this.velocidade_atual = velocidade
            }
        }

	let carro = new Carro()

	Para encapsular um atributo dentro de uma funcao construtora, declaramos sem o this


	Utilizando conceito de factory para criar uma objeto: 

	let bicicleta_factory = function(){
            return {
                cor: 'branca',
                marcha: 'unica',
                aro: 12,
                pedalar(){
                    console.log("pedalou")
                }
            }
        }
        let bicicleta2 = bicicleta_factory()
	